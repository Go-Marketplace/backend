// Code generated by MockGen. DO NOT EDIT.
// Source: cart/internal/infrastructure/interfaces/cart.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	model "github.com/Go-Marketplace/backend/cart/internal/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockCartRepo is a mock of CartRepo interface.
type MockCartRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCartRepoMockRecorder
}

// MockCartRepoMockRecorder is the mock recorder for MockCartRepo.
type MockCartRepoMockRecorder struct {
	mock *MockCartRepo
}

// NewMockCartRepo creates a new mock instance.
func NewMockCartRepo(ctrl *gomock.Controller) *MockCartRepo {
	mock := &MockCartRepo{ctrl: ctrl}
	mock.recorder = &MockCartRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartRepo) EXPECT() *MockCartRepoMockRecorder {
	return m.recorder
}

// CreateCart mocks base method.
func (m *MockCartRepo) CreateCart(ctx context.Context, cart model.Cart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCart", ctx, cart)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCart indicates an expected call of CreateCart.
func (mr *MockCartRepoMockRecorder) CreateCart(ctx, cart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCart", reflect.TypeOf((*MockCartRepo)(nil).CreateCart), ctx, cart)
}

// CreateCartline mocks base method.
func (m *MockCartRepo) CreateCartline(ctx context.Context, cartline *model.CartLine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCartline", ctx, cartline)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCartline indicates an expected call of CreateCartline.
func (mr *MockCartRepoMockRecorder) CreateCartline(ctx, cartline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCartline", reflect.TypeOf((*MockCartRepo)(nil).CreateCartline), ctx, cartline)
}

// CreateCartlines mocks base method.
func (m *MockCartRepo) CreateCartlines(ctx context.Context, cartlines []*model.CartLine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCartlines", ctx, cartlines)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCartlines indicates an expected call of CreateCartlines.
func (mr *MockCartRepoMockRecorder) CreateCartlines(ctx, cartlines interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCartlines", reflect.TypeOf((*MockCartRepo)(nil).CreateCartlines), ctx, cartlines)
}

// DeleteCart mocks base method.
func (m *MockCartRepo) DeleteCart(ctx context.Context, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCart", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCart indicates an expected call of DeleteCart.
func (mr *MockCartRepoMockRecorder) DeleteCart(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCart", reflect.TypeOf((*MockCartRepo)(nil).DeleteCart), ctx, userID)
}

// DeleteCartCartlines mocks base method.
func (m *MockCartRepo) DeleteCartCartlines(ctx context.Context, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartCartlines", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCartCartlines indicates an expected call of DeleteCartCartlines.
func (mr *MockCartRepoMockRecorder) DeleteCartCartlines(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartCartlines", reflect.TypeOf((*MockCartRepo)(nil).DeleteCartCartlines), ctx, userID)
}

// DeleteCartline mocks base method.
func (m *MockCartRepo) DeleteCartline(ctx context.Context, userID, productID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartline", ctx, userID, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCartline indicates an expected call of DeleteCartline.
func (mr *MockCartRepoMockRecorder) DeleteCartline(ctx, userID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartline", reflect.TypeOf((*MockCartRepo)(nil).DeleteCartline), ctx, userID, productID)
}

// DeleteProductCartlines mocks base method.
func (m *MockCartRepo) DeleteProductCartlines(ctx context.Context, productID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductCartlines", ctx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductCartlines indicates an expected call of DeleteProductCartlines.
func (mr *MockCartRepoMockRecorder) DeleteProductCartlines(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductCartlines", reflect.TypeOf((*MockCartRepo)(nil).DeleteProductCartlines), ctx, productID)
}

// GetCartline mocks base method.
func (m *MockCartRepo) GetCartline(ctx context.Context, userID, productID uuid.UUID) (*model.CartLine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartline", ctx, userID, productID)
	ret0, _ := ret[0].(*model.CartLine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartline indicates an expected call of GetCartline.
func (mr *MockCartRepoMockRecorder) GetCartline(ctx, userID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartline", reflect.TypeOf((*MockCartRepo)(nil).GetCartline), ctx, userID, productID)
}

// GetUserCart mocks base method.
func (m *MockCartRepo) GetUserCart(ctx context.Context, userID uuid.UUID) (*model.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCart", ctx, userID)
	ret0, _ := ret[0].(*model.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCart indicates an expected call of GetUserCart.
func (mr *MockCartRepoMockRecorder) GetUserCart(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCart", reflect.TypeOf((*MockCartRepo)(nil).GetUserCart), ctx, userID)
}

// UpdateCartline mocks base method.
func (m *MockCartRepo) UpdateCartline(ctx context.Context, cartline model.CartLine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartline", ctx, cartline)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCartline indicates an expected call of UpdateCartline.
func (mr *MockCartRepoMockRecorder) UpdateCartline(ctx, cartline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartline", reflect.TypeOf((*MockCartRepo)(nil).UpdateCartline), ctx, cartline)
}
