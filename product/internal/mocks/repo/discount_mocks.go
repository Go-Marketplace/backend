// Code generated by MockGen. DO NOT EDIT.
// Source: product/internal/infrastructure/interfaces/discount.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	model "github.com/Go-Marketplace/backend/product/internal/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockDiscountRepo is a mock of DiscountRepo interface.
type MockDiscountRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDiscountRepoMockRecorder
}

// MockDiscountRepoMockRecorder is the mock recorder for MockDiscountRepo.
type MockDiscountRepoMockRecorder struct {
	mock *MockDiscountRepo
}

// NewMockDiscountRepo creates a new mock instance.
func NewMockDiscountRepo(ctrl *gomock.Controller) *MockDiscountRepo {
	mock := &MockDiscountRepo{ctrl: ctrl}
	mock.recorder = &MockDiscountRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscountRepo) EXPECT() *MockDiscountRepoMockRecorder {
	return m.recorder
}

// CreateDiscount mocks base method.
func (m *MockDiscountRepo) CreateDiscount(ctx context.Context, discount model.Discount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDiscount", ctx, discount)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDiscount indicates an expected call of CreateDiscount.
func (mr *MockDiscountRepoMockRecorder) CreateDiscount(ctx, discount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiscount", reflect.TypeOf((*MockDiscountRepo)(nil).CreateDiscount), ctx, discount)
}

// DeleteDiscount mocks base method.
func (m *MockDiscountRepo) DeleteDiscount(ctx context.Context, productID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDiscount", ctx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDiscount indicates an expected call of DeleteDiscount.
func (mr *MockDiscountRepoMockRecorder) DeleteDiscount(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDiscount", reflect.TypeOf((*MockDiscountRepo)(nil).DeleteDiscount), ctx, productID)
}

// GetDiscount mocks base method.
func (m *MockDiscountRepo) GetDiscount(ctx context.Context, productID uuid.UUID) (*model.Discount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscount", ctx, productID)
	ret0, _ := ret[0].(*model.Discount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscount indicates an expected call of GetDiscount.
func (mr *MockDiscountRepoMockRecorder) GetDiscount(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscount", reflect.TypeOf((*MockDiscountRepo)(nil).GetDiscount), ctx, productID)
}
