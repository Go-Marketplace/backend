// Code generated by MockGen. DO NOT EDIT.
// Source: product/internal/infrastructure/interfaces/product.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	model "github.com/Go-Marketplace/backend/product/internal/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockProductRepo is a mock of ProductRepo interface.
type MockProductRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepoMockRecorder
}

// MockProductRepoMockRecorder is the mock recorder for MockProductRepo.
type MockProductRepoMockRecorder struct {
	mock *MockProductRepo
}

// NewMockProductRepo creates a new mock instance.
func NewMockProductRepo(ctrl *gomock.Controller) *MockProductRepo {
	mock := &MockProductRepo{ctrl: ctrl}
	mock.recorder = &MockProductRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepo) EXPECT() *MockProductRepoMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockProductRepo) CreateProduct(ctx context.Context, product model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductRepoMockRecorder) CreateProduct(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductRepo)(nil).CreateProduct), ctx, product)
}

// DeleteProduct mocks base method.
func (m *MockProductRepo) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductRepoMockRecorder) DeleteProduct(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductRepo)(nil).DeleteProduct), ctx, id)
}

// GetAllCategories mocks base method.
func (m *MockProductRepo) GetAllCategories(ctx context.Context) ([]*model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategories", ctx)
	ret0, _ := ret[0].([]*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories.
func (mr *MockProductRepoMockRecorder) GetAllCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockProductRepo)(nil).GetAllCategories), ctx)
}

// GetAllCategoryProducts mocks base method.
func (m *MockProductRepo) GetAllCategoryProducts(ctx context.Context, categoryID int32) ([]*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategoryProducts", ctx, categoryID)
	ret0, _ := ret[0].([]*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategoryProducts indicates an expected call of GetAllCategoryProducts.
func (mr *MockProductRepoMockRecorder) GetAllCategoryProducts(ctx, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategoryProducts", reflect.TypeOf((*MockProductRepo)(nil).GetAllCategoryProducts), ctx, categoryID)
}

// GetAllProducts mocks base method.
func (m *MockProductRepo) GetAllProducts(ctx context.Context) ([]*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts", ctx)
	ret0, _ := ret[0].([]*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockProductRepoMockRecorder) GetAllProducts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockProductRepo)(nil).GetAllProducts), ctx)
}

// GetAllUserProducts mocks base method.
func (m *MockProductRepo) GetAllUserProducts(ctx context.Context, userID uuid.UUID) ([]*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserProducts", ctx, userID)
	ret0, _ := ret[0].([]*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserProducts indicates an expected call of GetAllUserProducts.
func (mr *MockProductRepoMockRecorder) GetAllUserProducts(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserProducts", reflect.TypeOf((*MockProductRepo)(nil).GetAllUserProducts), ctx, userID)
}

// GetCategory mocks base method.
func (m *MockProductRepo) GetCategory(ctx context.Context, id int32) (*model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", ctx, id)
	ret0, _ := ret[0].(*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockProductRepoMockRecorder) GetCategory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockProductRepo)(nil).GetCategory), ctx, id)
}

// GetProduct mocks base method.
func (m *MockProductRepo) GetProduct(ctx context.Context, id uuid.UUID) (*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx, id)
	ret0, _ := ret[0].(*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockProductRepoMockRecorder) GetProduct(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockProductRepo)(nil).GetProduct), ctx, id)
}

// ModerateProduct mocks base method.
func (m *MockProductRepo) ModerateProduct(ctx context.Context, product model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModerateProduct", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModerateProduct indicates an expected call of ModerateProduct.
func (mr *MockProductRepoMockRecorder) ModerateProduct(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModerateProduct", reflect.TypeOf((*MockProductRepo)(nil).ModerateProduct), ctx, product)
}

// UpdateProduct mocks base method.
func (m *MockProductRepo) UpdateProduct(ctx context.Context, product model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductRepoMockRecorder) UpdateProduct(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductRepo)(nil).UpdateProduct), ctx, product)
}
