// Code generated by MockGen. DO NOT EDIT.
// Source: order/internal/infrastructure/interfaces/order.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	dto "github.com/Go-Marketplace/backend/order/internal/api/grpc/dto"
	model "github.com/Go-Marketplace/backend/order/internal/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockOrderRepo is a mock of OrderRepo interface.
type MockOrderRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepoMockRecorder
}

// MockOrderRepoMockRecorder is the mock recorder for MockOrderRepo.
type MockOrderRepoMockRecorder struct {
	mock *MockOrderRepo
}

// NewMockOrderRepo creates a new mock instance.
func NewMockOrderRepo(ctrl *gomock.Controller) *MockOrderRepo {
	mock := &MockOrderRepo{ctrl: ctrl}
	mock.recorder = &MockOrderRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepo) EXPECT() *MockOrderRepoMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderRepo) CreateOrder(ctx context.Context, order *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderRepoMockRecorder) CreateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderRepo)(nil).CreateOrder), ctx, order)
}

// CreateOrderline mocks base method.
func (m *MockOrderRepo) CreateOrderline(ctx context.Context, orderline *model.Orderline) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderline", ctx, orderline)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrderline indicates an expected call of CreateOrderline.
func (mr *MockOrderRepoMockRecorder) CreateOrderline(ctx, orderline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderline", reflect.TypeOf((*MockOrderRepo)(nil).CreateOrderline), ctx, orderline)
}

// DeleteOrder mocks base method.
func (m *MockOrderRepo) DeleteOrder(ctx context.Context, orderID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockOrderRepoMockRecorder) DeleteOrder(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockOrderRepo)(nil).DeleteOrder), ctx, orderID)
}

// DeleteOrderline mocks base method.
func (m *MockOrderRepo) DeleteOrderline(ctx context.Context, orderID, productID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderline", ctx, orderID, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderline indicates an expected call of DeleteOrderline.
func (mr *MockOrderRepoMockRecorder) DeleteOrderline(ctx, orderID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderline", reflect.TypeOf((*MockOrderRepo)(nil).DeleteOrderline), ctx, orderID, productID)
}

// GetOrder mocks base method.
func (m *MockOrderRepo) GetOrder(ctx context.Context, orderID uuid.UUID) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, orderID)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderRepoMockRecorder) GetOrder(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderRepo)(nil).GetOrder), ctx, orderID)
}

// GetOrderline mocks base method.
func (m *MockOrderRepo) GetOrderline(ctx context.Context, orderID, productID uuid.UUID) (*model.Orderline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderline", ctx, orderID, productID)
	ret0, _ := ret[0].(*model.Orderline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderline indicates an expected call of GetOrderline.
func (mr *MockOrderRepoMockRecorder) GetOrderline(ctx, orderID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderline", reflect.TypeOf((*MockOrderRepo)(nil).GetOrderline), ctx, orderID, productID)
}

// GetOrders mocks base method.
func (m *MockOrderRepo) GetOrders(ctx context.Context, searchParams dto.SearchOrderDTO) ([]*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, searchParams)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderRepoMockRecorder) GetOrders(ctx, searchParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderRepo)(nil).GetOrders), ctx, searchParams)
}

// UpdateOrderline mocks base method.
func (m *MockOrderRepo) UpdateOrderline(ctx context.Context, order *model.Orderline) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderline", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderline indicates an expected call of UpdateOrderline.
func (mr *MockOrderRepoMockRecorder) UpdateOrderline(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderline", reflect.TypeOf((*MockOrderRepo)(nil).UpdateOrderline), ctx, order)
}
